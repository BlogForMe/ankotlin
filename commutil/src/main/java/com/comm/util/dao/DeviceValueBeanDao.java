package com.comm.util.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.comm.util.green.DeviceValueBean.Alarm;
import com.comm.util.green.DeviceValueBean.AlarmConverter;

import com.comm.util.green.DeviceValueBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE_VALUE_BEAN".
*/
public class DeviceValueBeanDao extends AbstractDao<DeviceValueBean, Long> {

    public static final String TABLENAME = "DEVICE_VALUE_BEAN";

    /**
     * Properties of entity DeviceValueBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Number = new Property(0, Long.class, "number", true, "_ID");
        public final static Property PressureHighValue = new Property(1, int.class, "pressureHighValue", false, "PRESSURE_HIGH_VALUE");
        public final static Property PressureLowValue = new Property(2, int.class, "pressureLowValue", false, "PRESSURE_LOW_VALUE");
        public final static Property JumpValue = new Property(3, int.class, "jumpValue", false, "JUMP_VALUE");
        public final static Property DataValue = new Property(4, double.class, "dataValue", false, "DATA_VALUE");
        public final static Property Date = new Property(5, String.class, "date", false, "DATE");
        public final static Property CheckDate = new Property(6, java.util.Date.class, "checkDate", false, "CHECK_DATE");
        public final static Property CheckGls = new Property(7, boolean.class, "checkGls", false, "CHECK_GLS");
        public final static Property DeviceType = new Property(8, int.class, "deviceType", false, "DEVICE_TYPE");
        public final static Property BeforeMeal = new Property(9, int.class, "beforeMeal", false, "BEFORE_MEAL");
        public final static Property CkeckTime = new Property(10, String.class, "ckeckTime", false, "CKECK_TIME");
        public final static Property Alarm = new Property(11, Integer.class, "alarm", false, "ALARM");
    }

    private final AlarmConverter alarmConverter = new AlarmConverter();

    public DeviceValueBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceValueBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE_VALUE_BEAN\" (" + //
                "\"_ID\" INTEGER PRIMARY KEY ," + // 0: number
                "\"PRESSURE_HIGH_VALUE\" INTEGER NOT NULL ," + // 1: pressureHighValue
                "\"PRESSURE_LOW_VALUE\" INTEGER NOT NULL ," + // 2: pressureLowValue
                "\"JUMP_VALUE\" INTEGER NOT NULL ," + // 3: jumpValue
                "\"DATA_VALUE\" REAL NOT NULL ," + // 4: dataValue
                "\"DATE\" TEXT," + // 5: date
                "\"CHECK_DATE\" INTEGER," + // 6: checkDate
                "\"CHECK_GLS\" INTEGER NOT NULL ," + // 7: checkGls
                "\"DEVICE_TYPE\" INTEGER NOT NULL ," + // 8: deviceType
                "\"BEFORE_MEAL\" INTEGER NOT NULL ," + // 9: beforeMeal
                "\"CKECK_TIME\" TEXT," + // 10: ckeckTime
                "\"ALARM\" INTEGER);"); // 11: alarm
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE_VALUE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeviceValueBean entity) {
        stmt.clearBindings();
 
        Long number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(1, number);
        }
        stmt.bindLong(2, entity.getPressureHighValue());
        stmt.bindLong(3, entity.getPressureLowValue());
        stmt.bindLong(4, entity.getJumpValue());
        stmt.bindDouble(5, entity.getDataValue());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
 
        java.util.Date checkDate = entity.getCheckDate();
        if (checkDate != null) {
            stmt.bindLong(7, checkDate.getTime());
        }
        stmt.bindLong(8, entity.getCheckGls() ? 1L: 0L);
        stmt.bindLong(9, entity.getDeviceType());
        stmt.bindLong(10, entity.getBeforeMeal());
 
        String ckeckTime = entity.getCkeckTime();
        if (ckeckTime != null) {
            stmt.bindString(11, ckeckTime);
        }
 
        Alarm alarm = entity.getAlarm();
        if (alarm != null) {
            stmt.bindLong(12, alarmConverter.convertToDatabaseValue(alarm));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeviceValueBean entity) {
        stmt.clearBindings();
 
        Long number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(1, number);
        }
        stmt.bindLong(2, entity.getPressureHighValue());
        stmt.bindLong(3, entity.getPressureLowValue());
        stmt.bindLong(4, entity.getJumpValue());
        stmt.bindDouble(5, entity.getDataValue());
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
 
        java.util.Date checkDate = entity.getCheckDate();
        if (checkDate != null) {
            stmt.bindLong(7, checkDate.getTime());
        }
        stmt.bindLong(8, entity.getCheckGls() ? 1L: 0L);
        stmt.bindLong(9, entity.getDeviceType());
        stmt.bindLong(10, entity.getBeforeMeal());
 
        String ckeckTime = entity.getCkeckTime();
        if (ckeckTime != null) {
            stmt.bindString(11, ckeckTime);
        }
 
        Alarm alarm = entity.getAlarm();
        if (alarm != null) {
            stmt.bindLong(12, alarmConverter.convertToDatabaseValue(alarm));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeviceValueBean readEntity(Cursor cursor, int offset) {
        DeviceValueBean entity = new DeviceValueBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // number
            cursor.getInt(offset + 1), // pressureHighValue
            cursor.getInt(offset + 2), // pressureLowValue
            cursor.getInt(offset + 3), // jumpValue
            cursor.getDouble(offset + 4), // dataValue
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // date
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // checkDate
            cursor.getShort(offset + 7) != 0, // checkGls
            cursor.getInt(offset + 8), // deviceType
            cursor.getInt(offset + 9), // beforeMeal
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ckeckTime
            cursor.isNull(offset + 11) ? null : alarmConverter.convertToEntityProperty(cursor.getInt(offset + 11)) // alarm
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeviceValueBean entity, int offset) {
        entity.setNumber(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPressureHighValue(cursor.getInt(offset + 1));
        entity.setPressureLowValue(cursor.getInt(offset + 2));
        entity.setJumpValue(cursor.getInt(offset + 3));
        entity.setDataValue(cursor.getDouble(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCheckDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setCheckGls(cursor.getShort(offset + 7) != 0);
        entity.setDeviceType(cursor.getInt(offset + 8));
        entity.setBeforeMeal(cursor.getInt(offset + 9));
        entity.setCkeckTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAlarm(cursor.isNull(offset + 11) ? null : alarmConverter.convertToEntityProperty(cursor.getInt(offset + 11)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeviceValueBean entity, long rowId) {
        entity.setNumber(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeviceValueBean entity) {
        if(entity != null) {
            return entity.getNumber();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeviceValueBean entity) {
        return entity.getNumber() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
