package com.comm.util.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.comm.util.bean.Patient;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PATIENT".
*/
public class PatientDao extends AbstractDao<Patient, Long> {

    public static final String TABLENAME = "PATIENT";

    /**
     * Properties of entity Patient.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PatientId = new Property(0, Long.class, "patientId", true, "_ID");
        public final static Property Sex = new Property(1, int.class, "sex", false, "SEX");
        public final static Property BoxType = new Property(2, int.class, "boxType", false, "BOX_TYPE");
        public final static Property PatientCode = new Property(3, int.class, "patientCode", false, "PATIENT_CODE");
        public final static Property BoxId = new Property(4, String.class, "boxId", false, "BOX_ID");
        public final static Property Token = new Property(5, String.class, "token", false, "TOKEN");
        public final static Property GatewayMac = new Property(6, String.class, "gatewayMac", false, "GATEWAY_MAC");
        public final static Property LanguageType = new Property(7, int.class, "languageType", false, "LANGUAGE_TYPE");
        public final static Property MotifColor = new Property(8, int.class, "motifColor", false, "MOTIF_COLOR");
        public final static Property CheckCurrent = new Property(9, boolean.class, "checkCurrent", false, "CHECK_CURRENT");
        public final static Property PatientName = new Property(10, String.class, "patientName", false, "PATIENT_NAME");
        public final static Property BranchName = new Property(11, String.class, "branchName", false, "BRANCH_NAME");
        public final static Property BranchNo = new Property(12, int.class, "branchNo", false, "BRANCH_NO");
        public final static Property MemberType = new Property(13, int.class, "memberType", false, "MEMBER_TYPE");
        public final static Property BindUserType = new Property(14, int.class, "bindUserType", false, "BIND_USER_TYPE");
        public final static Property BranchPerson = new Property(15, int.class, "branchPerson", false, "BRANCH_PERSON");
        public final static Property Alias = new Property(16, String.class, "alias", false, "ALIAS");
        public final static Property WaitingAgreementConfirmStatus = new Property(17, int.class, "waitingAgreementConfirmStatus", false, "WAITING_AGREEMENT_CONFIRM_STATUS");
        public final static Property Age = new Property(18, int.class, "age", false, "AGE");
        public final static Property Mobile = new Property(19, String.class, "mobile", false, "MOBILE");
        public final static Property Height = new Property(20, int.class, "height", false, "HEIGHT");
        public final static Property IfAthletes = new Property(21, int.class, "ifAthletes", false, "IF_ATHLETES");
    }


    public PatientDao(DaoConfig config) {
        super(config);
    }
    
    public PatientDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PATIENT\" (" + //
                "\"_ID\" INTEGER PRIMARY KEY ," + // 0: patientId
                "\"SEX\" INTEGER NOT NULL ," + // 1: sex
                "\"BOX_TYPE\" INTEGER NOT NULL ," + // 2: boxType
                "\"PATIENT_CODE\" INTEGER NOT NULL ," + // 3: patientCode
                "\"BOX_ID\" TEXT," + // 4: boxId
                "\"TOKEN\" TEXT," + // 5: token
                "\"GATEWAY_MAC\" TEXT," + // 6: gatewayMac
                "\"LANGUAGE_TYPE\" INTEGER NOT NULL ," + // 7: languageType
                "\"MOTIF_COLOR\" INTEGER NOT NULL ," + // 8: motifColor
                "\"CHECK_CURRENT\" INTEGER NOT NULL ," + // 9: checkCurrent
                "\"PATIENT_NAME\" TEXT," + // 10: patientName
                "\"BRANCH_NAME\" TEXT," + // 11: branchName
                "\"BRANCH_NO\" INTEGER NOT NULL ," + // 12: branchNo
                "\"MEMBER_TYPE\" INTEGER NOT NULL ," + // 13: memberType
                "\"BIND_USER_TYPE\" INTEGER NOT NULL ," + // 14: bindUserType
                "\"BRANCH_PERSON\" INTEGER NOT NULL ," + // 15: branchPerson
                "\"ALIAS\" TEXT," + // 16: alias
                "\"WAITING_AGREEMENT_CONFIRM_STATUS\" INTEGER NOT NULL ," + // 17: waitingAgreementConfirmStatus
                "\"AGE\" INTEGER NOT NULL ," + // 18: age
                "\"MOBILE\" TEXT," + // 19: mobile
                "\"HEIGHT\" INTEGER NOT NULL ," + // 20: height
                "\"IF_ATHLETES\" INTEGER NOT NULL );"); // 21: ifAthletes
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PATIENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Patient entity) {
        stmt.clearBindings();
 
        Long patientId = entity.getPatientId();
        if (patientId != null) {
            stmt.bindLong(1, patientId);
        }
        stmt.bindLong(2, entity.getSex());
        stmt.bindLong(3, entity.getBoxType());
        stmt.bindLong(4, entity.getPatientCode());
 
        String boxId = entity.getBoxId();
        if (boxId != null) {
            stmt.bindString(5, boxId);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(6, token);
        }
 
        String gatewayMac = entity.getGatewayMac();
        if (gatewayMac != null) {
            stmt.bindString(7, gatewayMac);
        }
        stmt.bindLong(8, entity.getLanguageType());
        stmt.bindLong(9, entity.getMotifColor());
        stmt.bindLong(10, entity.getCheckCurrent() ? 1L: 0L);
 
        String patientName = entity.getPatientName();
        if (patientName != null) {
            stmt.bindString(11, patientName);
        }
 
        String branchName = entity.getBranchName();
        if (branchName != null) {
            stmt.bindString(12, branchName);
        }
        stmt.bindLong(13, entity.getBranchNo());
        stmt.bindLong(14, entity.getMemberType());
        stmt.bindLong(15, entity.getBindUserType());
        stmt.bindLong(16, entity.getBranchPerson());
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(17, alias);
        }
        stmt.bindLong(18, entity.getWaitingAgreementConfirmStatus());
        stmt.bindLong(19, entity.getAge());
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(20, mobile);
        }
        stmt.bindLong(21, entity.getHeight());
        stmt.bindLong(22, entity.getIfAthletes());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Patient entity) {
        stmt.clearBindings();
 
        Long patientId = entity.getPatientId();
        if (patientId != null) {
            stmt.bindLong(1, patientId);
        }
        stmt.bindLong(2, entity.getSex());
        stmt.bindLong(3, entity.getBoxType());
        stmt.bindLong(4, entity.getPatientCode());
 
        String boxId = entity.getBoxId();
        if (boxId != null) {
            stmt.bindString(5, boxId);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(6, token);
        }
 
        String gatewayMac = entity.getGatewayMac();
        if (gatewayMac != null) {
            stmt.bindString(7, gatewayMac);
        }
        stmt.bindLong(8, entity.getLanguageType());
        stmt.bindLong(9, entity.getMotifColor());
        stmt.bindLong(10, entity.getCheckCurrent() ? 1L: 0L);
 
        String patientName = entity.getPatientName();
        if (patientName != null) {
            stmt.bindString(11, patientName);
        }
 
        String branchName = entity.getBranchName();
        if (branchName != null) {
            stmt.bindString(12, branchName);
        }
        stmt.bindLong(13, entity.getBranchNo());
        stmt.bindLong(14, entity.getMemberType());
        stmt.bindLong(15, entity.getBindUserType());
        stmt.bindLong(16, entity.getBranchPerson());
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(17, alias);
        }
        stmt.bindLong(18, entity.getWaitingAgreementConfirmStatus());
        stmt.bindLong(19, entity.getAge());
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(20, mobile);
        }
        stmt.bindLong(21, entity.getHeight());
        stmt.bindLong(22, entity.getIfAthletes());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Patient readEntity(Cursor cursor, int offset) {
        Patient entity = new Patient( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // patientId
            cursor.getInt(offset + 1), // sex
            cursor.getInt(offset + 2), // boxType
            cursor.getInt(offset + 3), // patientCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // boxId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // token
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // gatewayMac
            cursor.getInt(offset + 7), // languageType
            cursor.getInt(offset + 8), // motifColor
            cursor.getShort(offset + 9) != 0, // checkCurrent
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // patientName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // branchName
            cursor.getInt(offset + 12), // branchNo
            cursor.getInt(offset + 13), // memberType
            cursor.getInt(offset + 14), // bindUserType
            cursor.getInt(offset + 15), // branchPerson
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // alias
            cursor.getInt(offset + 17), // waitingAgreementConfirmStatus
            cursor.getInt(offset + 18), // age
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // mobile
            cursor.getInt(offset + 20), // height
            cursor.getInt(offset + 21) // ifAthletes
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Patient entity, int offset) {
        entity.setPatientId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSex(cursor.getInt(offset + 1));
        entity.setBoxType(cursor.getInt(offset + 2));
        entity.setPatientCode(cursor.getInt(offset + 3));
        entity.setBoxId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setToken(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGatewayMac(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLanguageType(cursor.getInt(offset + 7));
        entity.setMotifColor(cursor.getInt(offset + 8));
        entity.setCheckCurrent(cursor.getShort(offset + 9) != 0);
        entity.setPatientName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBranchName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBranchNo(cursor.getInt(offset + 12));
        entity.setMemberType(cursor.getInt(offset + 13));
        entity.setBindUserType(cursor.getInt(offset + 14));
        entity.setBranchPerson(cursor.getInt(offset + 15));
        entity.setAlias(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setWaitingAgreementConfirmStatus(cursor.getInt(offset + 17));
        entity.setAge(cursor.getInt(offset + 18));
        entity.setMobile(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setHeight(cursor.getInt(offset + 20));
        entity.setIfAthletes(cursor.getInt(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Patient entity, long rowId) {
        entity.setPatientId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Patient entity) {
        if(entity != null) {
            return entity.getPatientId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Patient entity) {
        return entity.getPatientId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
