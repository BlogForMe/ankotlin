package com.comm.util.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.comm.util.green.Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE".
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RemindId = new Property(0, Long.class, "remindId", true, "REMIND_ID");
        public final static Property RecordId = new Property(1, int.class, "recordId", false, "RECORD_ID");
        public final static Property AdviceId = new Property(2, int.class, "adviceId", false, "ADVICE_ID");
        public final static Property ReadStatus = new Property(3, int.class, "readStatus", false, "READ_STATUS");
        public final static Property PatientId = new Property(4, int.class, "patientId", false, "PATIENT_ID");
        public final static Property CreateTime = new Property(5, String.class, "createTime", false, "CREATE_TIME");
        public final static Property RemindType = new Property(6, int.class, "remindType", false, "REMIND_TYPE");
        public final static Property RemindContent = new Property(7, String.class, "remindContent", false, "REMIND_CONTENT");
        public final static Property BoxId = new Property(8, String.class, "boxId", false, "BOX_ID");
        public final static Property MessagePlayType = new Property(9, int.class, "messagePlayType", false, "MESSAGE_PLAY_TYPE");
        public final static Property MessagePlayCount = new Property(10, int.class, "messagePlayCount", false, "MESSAGE_PLAY_COUNT");
        public final static Property MessagePlayInterval = new Property(11, int.class, "messagePlayInterval", false, "MESSAGE_PLAY_INTERVAL");
        public final static Property ScreenShowType = new Property(12, int.class, "screenShowType", false, "SCREEN_SHOW_TYPE");
        public final static Property ScreenShowTypeTime = new Property(13, int.class, "screenShowTypeTime", false, "SCREEN_SHOW_TYPE_TIME");
    }


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE\" (" + //
                "\"REMIND_ID\" INTEGER PRIMARY KEY ," + // 0: remindId
                "\"RECORD_ID\" INTEGER NOT NULL ," + // 1: recordId
                "\"ADVICE_ID\" INTEGER NOT NULL ," + // 2: adviceId
                "\"READ_STATUS\" INTEGER NOT NULL ," + // 3: readStatus
                "\"PATIENT_ID\" INTEGER NOT NULL ," + // 4: patientId
                "\"CREATE_TIME\" TEXT," + // 5: createTime
                "\"REMIND_TYPE\" INTEGER NOT NULL ," + // 6: remindType
                "\"REMIND_CONTENT\" TEXT NOT NULL ," + // 7: remindContent
                "\"BOX_ID\" TEXT NOT NULL ," + // 8: boxId
                "\"MESSAGE_PLAY_TYPE\" INTEGER NOT NULL ," + // 9: messagePlayType
                "\"MESSAGE_PLAY_COUNT\" INTEGER NOT NULL ," + // 10: messagePlayCount
                "\"MESSAGE_PLAY_INTERVAL\" INTEGER NOT NULL ," + // 11: messagePlayInterval
                "\"SCREEN_SHOW_TYPE\" INTEGER NOT NULL ," + // 12: screenShowType
                "\"SCREEN_SHOW_TYPE_TIME\" INTEGER NOT NULL );"); // 13: screenShowTypeTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long remindId = entity.getRemindId();
        if (remindId != null) {
            stmt.bindLong(1, remindId);
        }
        stmt.bindLong(2, entity.getRecordId());
        stmt.bindLong(3, entity.getAdviceId());
        stmt.bindLong(4, entity.getReadStatus());
        stmt.bindLong(5, entity.getPatientId());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(6, createTime);
        }
        stmt.bindLong(7, entity.getRemindType());
        stmt.bindString(8, entity.getRemindContent());
        stmt.bindString(9, entity.getBoxId());
        stmt.bindLong(10, entity.getMessagePlayType());
        stmt.bindLong(11, entity.getMessagePlayCount());
        stmt.bindLong(12, entity.getMessagePlayInterval());
        stmt.bindLong(13, entity.getScreenShowType());
        stmt.bindLong(14, entity.getScreenShowTypeTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long remindId = entity.getRemindId();
        if (remindId != null) {
            stmt.bindLong(1, remindId);
        }
        stmt.bindLong(2, entity.getRecordId());
        stmt.bindLong(3, entity.getAdviceId());
        stmt.bindLong(4, entity.getReadStatus());
        stmt.bindLong(5, entity.getPatientId());
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(6, createTime);
        }
        stmt.bindLong(7, entity.getRemindType());
        stmt.bindString(8, entity.getRemindContent());
        stmt.bindString(9, entity.getBoxId());
        stmt.bindLong(10, entity.getMessagePlayType());
        stmt.bindLong(11, entity.getMessagePlayCount());
        stmt.bindLong(12, entity.getMessagePlayInterval());
        stmt.bindLong(13, entity.getScreenShowType());
        stmt.bindLong(14, entity.getScreenShowTypeTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // remindId
            cursor.getInt(offset + 1), // recordId
            cursor.getInt(offset + 2), // adviceId
            cursor.getInt(offset + 3), // readStatus
            cursor.getInt(offset + 4), // patientId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // createTime
            cursor.getInt(offset + 6), // remindType
            cursor.getString(offset + 7), // remindContent
            cursor.getString(offset + 8), // boxId
            cursor.getInt(offset + 9), // messagePlayType
            cursor.getInt(offset + 10), // messagePlayCount
            cursor.getInt(offset + 11), // messagePlayInterval
            cursor.getInt(offset + 12), // screenShowType
            cursor.getInt(offset + 13) // screenShowTypeTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.setRemindId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRecordId(cursor.getInt(offset + 1));
        entity.setAdviceId(cursor.getInt(offset + 2));
        entity.setReadStatus(cursor.getInt(offset + 3));
        entity.setPatientId(cursor.getInt(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRemindType(cursor.getInt(offset + 6));
        entity.setRemindContent(cursor.getString(offset + 7));
        entity.setBoxId(cursor.getString(offset + 8));
        entity.setMessagePlayType(cursor.getInt(offset + 9));
        entity.setMessagePlayCount(cursor.getInt(offset + 10));
        entity.setMessagePlayInterval(cursor.getInt(offset + 11));
        entity.setScreenShowType(cursor.getInt(offset + 12));
        entity.setScreenShowTypeTime(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.setRemindId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.getRemindId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Message entity) {
        return entity.getRemindId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
