package com.comm.util.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.comm.util.green.Device;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE".
*/
public class DeviceDao extends AbstractDao<Device, Long> {

    public static final String TABLENAME = "DEVICE";

    /**
     * Properties of entity Device.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_ID");
        public final static Property DeviceType = new Property(1, int.class, "deviceType", false, "DEVICE_TYPE");
        public final static Property ShortAdress = new Property(2, String.class, "shortAdress", false, "SHORT_ADRESS");
        public final static Property IeeAdress = new Property(3, String.class, "ieeAdress", false, "IEE_ADRESS");
        public final static Property State = new Property(4, boolean.class, "state", false, "STATE");
        public final static Property SoftVersion = new Property(5, String.class, "softVersion", false, "SOFT_VERSION");
        public final static Property HardwareVersion = new Property(6, String.class, "hardwareVersion", false, "HARDWARE_VERSION");
    }


    public DeviceDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE\" (" + //
                "\"_ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DEVICE_TYPE\" INTEGER NOT NULL ," + // 1: deviceType
                "\"SHORT_ADRESS\" TEXT," + // 2: shortAdress
                "\"IEE_ADRESS\" TEXT," + // 3: ieeAdress
                "\"STATE\" INTEGER NOT NULL ," + // 4: state
                "\"SOFT_VERSION\" TEXT," + // 5: softVersion
                "\"HARDWARE_VERSION\" TEXT);"); // 6: hardwareVersion
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Device entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDeviceType());
 
        String shortAdress = entity.getShortAdress();
        if (shortAdress != null) {
            stmt.bindString(3, shortAdress);
        }
 
        String ieeAdress = entity.getIeeAdress();
        if (ieeAdress != null) {
            stmt.bindString(4, ieeAdress);
        }
        stmt.bindLong(5, entity.getState() ? 1L: 0L);
 
        String softVersion = entity.getSoftVersion();
        if (softVersion != null) {
            stmt.bindString(6, softVersion);
        }
 
        String hardwareVersion = entity.getHardwareVersion();
        if (hardwareVersion != null) {
            stmt.bindString(7, hardwareVersion);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Device entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDeviceType());
 
        String shortAdress = entity.getShortAdress();
        if (shortAdress != null) {
            stmt.bindString(3, shortAdress);
        }
 
        String ieeAdress = entity.getIeeAdress();
        if (ieeAdress != null) {
            stmt.bindString(4, ieeAdress);
        }
        stmt.bindLong(5, entity.getState() ? 1L: 0L);
 
        String softVersion = entity.getSoftVersion();
        if (softVersion != null) {
            stmt.bindString(6, softVersion);
        }
 
        String hardwareVersion = entity.getHardwareVersion();
        if (hardwareVersion != null) {
            stmt.bindString(7, hardwareVersion);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Device readEntity(Cursor cursor, int offset) {
        Device entity = new Device( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // deviceType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shortAdress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ieeAdress
            cursor.getShort(offset + 4) != 0, // state
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // softVersion
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // hardwareVersion
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Device entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceType(cursor.getInt(offset + 1));
        entity.setShortAdress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIeeAdress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setState(cursor.getShort(offset + 4) != 0);
        entity.setSoftVersion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHardwareVersion(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Device entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Device entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Device entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
